////////////////////////////////////////////////////
// Name: Taylor Murphy
// Class : CMPS 4883 Advanced Programing Techniques
// Date : 5 October 2015
// Program 2 - Coin Sorter
////////////////////////////////////////////////////
/*
Notes:

Declare a class CoinSorter. 

Choose your methods
    two constructors 
    a toString method
    a serialize method (that puts the ArrayList into the array and sorts it)
    a fillRolls method
    computeTotal method

An ArrayList must be used to contain the coin denominations. 

A sorted array must be used to contain the coin denominations sorted. 

CoinSorter has 
    the ArrayList 
    the array 
    the four counts of filled rolls of various coins 
    and the four counts of partially unfilled rolls

Main should 
    print headings
    prompt for file names
        could randomly generate and input file 
        close it and re-open it for reading
        then read and process data in the file
        close the files, then stop. 
    
    have a double nested loop
        a while !eof loop
        a while !marker loop 
    
    Declare and define methods that do I/O in the MAIN class 
    but not in the MAIN method! 
    
main class should 
    include methods to show Introductory and Exit screens

In Java ArrayLists, list.get(i) returns a copy of the item.  
Not the actual item!!!  
So if you change the item, you need to call list.set(i,item);

Reqs:

The Mission:
    The program reads in a list of coin denominations a file and inserts 
    them into an array list until the marker (-1) is encountered, then puts
    them in an array, sorts them - ordering the denominations by numeric 
    value. It will then fill up “rolls” of coins. Rolls can hold 50 pennies,
    40 nickels, 50 dimes, or 40 quarters. Then more coins can be read in 
    until the next marker, put them in the array, sort, fill more rolls,
    over and over again until the end of file.

Correctness

    CoinSorter class (constructors and proper methods)                      (10)
    Use try/catch for File I/O                                              (4)
    Uses Random to generate input file                                      (10)
    Reads file correctly up to marker                                       (4)
    Inserts coin into CoinSorter object which inserts it into its ArrayList (3)         	
    CoinSorter calculates number of rolls/leftovers correctly               (5)
        CoinSorter converts ArrayList to a 1D array                         (2)
    CoinSorter returns number of rolls/leftovers correctly for one subset   (4)
        CoinSorter accumulates number of rolls/leftovers correctly          (5) 
        for each successive subset 
    Prints correct results for number of rolls/leftovers                    (2)
================================================================================

Algorithm 

    Short main (calls methods)                                              (5)
    Methods to:                                                             (10)
        ReadFile----
        ProcessSubset
        OpenStreams
        PrintMessages
        PrintHeading 
================================================================================

Input

    Gets input from file generated by Random                                (4)
================================================================================

Output 

    Screen output:                                                          (2)
        Intro and Exit Screen
        Prompts understandable

    Output file                                                             (8)
        Heading
        listing of rolls/leftovers neat
        money data formatted
        column headings
        labels
================================================================================

Style                                                                       (5)
        use of blank lines
        indentation
        ids and method names  
        NO I/O in main
        NO I/O in non-main class except for error messages
================================================================================

Documentation                                                               (5)
    methods documented
    program and files documented
        name
	internal code comments
================================================================================

General                                                                     (5)
    Turned in everything required (source code, 2 input files, 
        2 outputs per input file, executable)
    Used Separate files
================================================================================


public class Bicycle
    {
        public int cadence;
        public int gear;
        public int speed;
        
        public Bicycle(int startCadence, int startSpeed, int startGear)
        {
            gear = startGear;
            cadence = startCadence;
            speed = startSpeed;
        }
                
        public void setCadence(int newValue)
        {
            cadence = newValue;
        }
        
        public void setGear(int newValue) 
        {
            gear = newValue;
        }
        
        public void applyBrake(int decrement)
        {
            speed -= decrement;
        }
        
        public void speedUp(int increment) 
        {
            speed += increment;
        }
        
    }




*/

package prog2coinsorter;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class CoinSorter 
{
    private static String inpTemp = null;
    //List<String> coinSortBuffer = new ArrayList<String>();
        
    //the array 
    //the four counts of filled rolls of various coins 
    //and the four counts of partially unfilled rolls
    
    public static void main(String[] args) throws IOException 
    {
        readFile();
        
        
        
        
        
        
        //Output block
        //Output file in --> Prog2CoinSorter\\src\\prog2coinsorter\\output.txt
        PrintWriter out = new PrintWriter(new FileWriter("G:\\School\\Fall 2015\\Contemporary-Programming-Languages\\Prog2CoinSorter\\src\\prog2coinsorter\\output.txt"));
        out.print(inpTemp);
        out.close();
        
    }
    
    public static void readFile() throws FileNotFoundException, IOException
    {
        //Intput file in --> Prog2CoinSorter\\src\\prog2coinsorter\\input.txt
        BufferedReader in = new BufferedReader (new FileReader("G:\\School\\Fall 2015\\Contemporary-Programming-Languages\\Prog2CoinSorter\\src\\prog2coinsorter\\input.txt"));
        try {
            String text = in.readLine();
            System.out.print(text + "\n");
            inpTemp = text;
        } 
        catch (IOException ex)
        {
            Logger.getLogger(Prog2CoinSorter.class.getName()).log(Level.SEVERE, null, ex);
        }
        in.close();
        
    }
    
//    public static void writeFile() throws FileNotFoundException, IOException
//    {
//        //Intput file in --> Prog2CoinSorter\\src\\prog2coinsorter\\input.txt
//        BufferedReader in = new BufferedReader (new FileReader("G:\\School\\Fall 2015\\Contemporary-Programming-Languages\\Prog2CoinSorter\\src\\prog2coinsorter\\input.txt"));
//        try {
//            String text = in.readLine();
//            System.out.print(text + "\n");
//            inpTemp = text;
//        } 
//        catch (IOException ex)
//        {
//            Logger.getLogger(Prog2CoinSorter.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        in.close();
//        
//    }

    
    
    
    

}
